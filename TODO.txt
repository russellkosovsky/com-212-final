
Project Structure:

          1. Customer Management

          2. Movie Management

          3. Admin and User Interaction
          


   Customer Management:
    
        a. Create a Customer class with the following attributes: name, credit card number, email address, and wishlist.
      
        b. Use a Hashtable to store customer records, with credit card numbers as keys for fast access (average O(1) time complexity).
      
        c. Implement methods for adding, updating, and deleting customers.
      
        d. For the wishlist, use a Queue data structure to efficiently manage movie access, deletion, and addition in constant time.

   Movie Management:
    
        a. Create a Movie class with the following attributes: title, release date, unique ID, Rotten Tomatoes score, and availability status.
      
        b. Implement a custom Binary Search Tree to store movie records sorted by release date, ensuring less than O(n) access time.
      
        c. Use a Hashtable to store movies by ID, allowing quick access in less than O(n) runtime.
      
        d. Maintain a PriorityQueue for the least rated available movies, ensuring constant time access and less than O(n) time for add/delete operations.
      
        e. Implement a LinkedList to store all movies in order of release date for printing.

   Admin and User Interaction:
    
        a. Create separate methods for admin and user functionalities, such as adding, updating, and deleting movies and customers.
      
        b. Implement a command-line interface for testing purposes, assuming the person using the program has the required permissions.

    
    
    For future features:
    
        a. Implement a login system to authenticate users and admins, with separate menus for each role.
      
        b. Add a "have watched" list for each customer, which could be implemented using a LinkedList or a HashSet, depending on the specific requirements and desired operations.
        
        
        
        
        
        
        
